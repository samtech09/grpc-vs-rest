// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	model "github.com/samtech09/grpc-vs-rest/grpc/model"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceResp struct {
	Count                int64                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Data                 []*model.StudentDetails `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ServiceResp) Reset()         { *m = ServiceResp{} }
func (m *ServiceResp) String() string { return proto.CompactTextString(m) }
func (*ServiceResp) ProtoMessage()    {}
func (*ServiceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e679f9ae460e2, []int{0}
}

func (m *ServiceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResp.Unmarshal(m, b)
}
func (m *ServiceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResp.Marshal(b, m, deterministic)
}
func (m *ServiceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResp.Merge(m, src)
}
func (m *ServiceResp) XXX_Size() int {
	return xxx_messageInfo_ServiceResp.Size(m)
}
func (m *ServiceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResp.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResp proto.InternalMessageInfo

func (m *ServiceResp) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ServiceResp) GetData() []*model.StudentDetails {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceResp)(nil), "service.ServiceResp")
}

func init() { proto.RegisterFile("service/service.proto", fileDescriptor_e51e679f9ae460e2) }

var fileDescriptor_e51e679f9ae460e2 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xc1, 0x8a, 0x83, 0x30,
	0x10, 0x86, 0xd7, 0x75, 0xd7, 0x65, 0x23, 0x7b, 0x09, 0x0a, 0xe2, 0x49, 0x3c, 0xb9, 0x07, 0x13,
	0xb0, 0xd7, 0x1e, 0x4b, 0x7b, 0xeb, 0x21, 0x7d, 0x82, 0x54, 0x87, 0x22, 0x44, 0x13, 0x92, 0x89,
	0xcf, 0x5f, 0x88, 0x29, 0xf4, 0x34, 0xfc, 0xcc, 0xff, 0xcd, 0x7c, 0xa4, 0x74, 0x60, 0xb7, 0x79,
	0x04, 0x1e, 0x27, 0x33, 0x56, 0xa3, 0xa6, 0x3f, 0x31, 0xd6, 0xdc, 0xc9, 0xa5, 0x57, 0x20, 0xed,
	0xca, 0x1f, 0xd6, 0x8c, 0xfd, 0xe6, 0x7a, 0x0b, 0x0e, 0x79, 0xa8, 0xf1, 0x45, 0x4f, 0xa0, 0xb8,
	0xf6, 0x68, 0x3c, 0xee, 0x64, 0x7b, 0x25, 0xf9, 0x6d, 0x67, 0x05, 0x38, 0x43, 0x0b, 0xf2, 0x3d,
	0x6a, 0xbf, 0x62, 0x95, 0x34, 0x49, 0x97, 0x8a, 0x3d, 0xd0, 0x7f, 0xf2, 0x35, 0x49, 0x94, 0xd5,
	0x67, 0x93, 0x76, 0xf9, 0x50, 0xb2, 0x70, 0x87, 0x39, 0xf4, 0x13, 0xac, 0x78, 0x02, 0x94, 0xb3,
	0x72, 0x22, 0x54, 0x86, 0x23, 0xc9, 0x04, 0x18, 0x6d, 0x91, 0x0e, 0xe4, 0xf7, 0x02, 0x71, 0x4b,
	0xff, 0x22, 0x73, 0x9e, 0x15, 0x82, 0xad, 0x0b, 0xf6, 0xf2, 0x7f, 0x7b, 0xde, 0x7e, 0xdc, 0xb3,
	0x20, 0x75, 0x78, 0x06, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x46, 0xfe, 0x0c, 0xe7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportClient is the client API for Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportClient interface {
	GetDetail(ctx context.Context, in *model.Filter, opts ...grpc.CallOption) (*ServiceResp, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) GetDetail(ctx context.Context, in *model.Filter, opts ...grpc.CallOption) (*ServiceResp, error) {
	out := new(ServiceResp)
	err := c.cc.Invoke(ctx, "/service.Report/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServer is the server API for Report service.
type ReportServer interface {
	GetDetail(context.Context, *model.Filter) (*ServiceResp, error)
}

// UnimplementedReportServer can be embedded to have forward compatible implementations.
type UnimplementedReportServer struct {
}

func (*UnimplementedReportServer) GetDetail(ctx context.Context, req *model.Filter) (*ServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Report/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).GetDetail(ctx, req.(*model.Filter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetail",
			Handler:    _Report_GetDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
